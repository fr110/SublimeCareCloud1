<Application 
             x:Class="SublimeCareCloud.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:SublimeCareCloud"
             xmlns:lControls="clr-namespace:SublimeCareCloud.Controls"
             xmlns:dgx="clr-namespace:DataGridExtensions;assembly=DataGridExtensions"
             xmlns:behaviors="clr-namespace:DataGridExtensions.Behaviors;assembly=DataGridExtensions"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Themes/HamburgerMenuTemplate.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />
                <!--
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseLight.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/FlatSlider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />-->
                <!--

                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Fonts.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Colors.xaml" />

                -->
                <!-- Accent and AppTheme setting -->
                <!--“Red”, “Green”, “Blue”, “Purple”, “Orange”, “Lime”, “Emerald”, “Teal”, “Cyan”, “Cobalt”, “Indigo”, “Violet”, 
                “Pink”, “Magenta”, “Crimson”, “Amber”, “Yellow”, “Brown”, “Olive”, “Steel”, “Mauve”, “Taupe”, “Sienna” -->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/Blue.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/crimson.xaml" />-->
                <!-- “BaseLight”, “BaseDark” -->
                <!--<ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/BaseDark.xaml" />-->
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Accents/baselight.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.AnimatedTabControl.xaml" />

                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.Button.xaml" />-->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Calendar.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.CheckBox.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.ComboBox.xaml" />-->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DataGrid.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DatePicker.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.DialogHost.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Expander.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Font.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.GridSplitter.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.GroupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Hyperlink.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.Label.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.Listbox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListView.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Menu.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PasswordBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ProgressBar.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.RadioButton.xaml" />
                <!--<ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollBar.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ScrollViewer.xaml" />-->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Shadows.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.Slider.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.TextBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TimePicker.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/materialdesigntheme.ToggleButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolBar.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolBarTray.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToolTip.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TreeView.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Thumb.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ValidationErrorTemplate.xaml" />

                <!-- throw in some extra colour for our floating action button -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
                <!-- throw in some extra colour for our floating action button -->
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/MaterialDesignColor.Blue.Named.Primary.xaml" />


                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.Blue.xaml" />


                <ResourceDictionary>
                    <local:MyBootStrapper x:Key="MyBootStrapper"/>

                </ResourceDictionary>



            </ResourceDictionary.MergedDictionaries>
            
            <!--Styles--> 
            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource MaterialDesignRaisedAccentButton}" />
            <Style TargetType="{x:Type Calendar}" BasedOn="{StaticResource MaterialDesignCalendarPortrait}" />
            <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource MaterialDesignCheckBox}" />
            <Style TargetType="{x:Type ComboBox}" BasedOn="{StaticResource MaterialDesignComboBox}" />
            <Style TargetType="{x:Type ContextMenu}" BasedOn="{StaticResource MaterialDesignContextMenu}" />
            <Style TargetType="{x:Type Thumb}" BasedOn="{StaticResource MaterialDesignThumb}" />
            <Style TargetType="{x:Type DataGrid}" BasedOn="{StaticResource MaterialDesignDataGrid}" />
            <Style TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource MaterialDesignDataGridCell}" />
            <Style TargetType="{x:Type DataGridColumnHeader}" BasedOn="{StaticResource MaterialDesignDataGridColumnHeader}" />
            <Style TargetType="{x:Type DataGridRow}" BasedOn="{StaticResource MaterialDesignDataGridRow}" >
                <Setter Property="Height" Value="150" />
                <Setter Property="Background" Value="#1B2F47" />
            </Style>
            <Style TargetType="{x:Type DataGridRowHeader}" BasedOn="{StaticResource MaterialDesignDataGridRowHeader}" 
                   >
                <Setter Property="Height" Value="15" />
                <Setter Property="Background" Value="#1B2F47" />
            </Style>
            <Style TargetType="{x:Type DatePicker}" BasedOn="{StaticResource MaterialDesignDatePicker}" />
            <Style TargetType="{x:Type Expander}" BasedOn="{StaticResource MaterialDesignExpander}" />
            <Style TargetType="{x:Type GridSplitter}" BasedOn="{StaticResource MaterialDesignGridSplitter}" />
            <Style TargetType="{x:Type GroupBox}" BasedOn="{StaticResource MaterialDesignGroupBox}" />
            <Style TargetType="{x:Type Label}" BasedOn="{StaticResource MaterialDesignLabel}" />
            <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource MaterialDesignListBox}" />
            <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource MaterialDesignListBoxItem}" />
            <!--<Style TargetType="{x:Type PasswordBox}" BasedOn="{StaticResource MaterialDesignPasswordBox}" />-->
            <Style TargetType="{x:Type ProgressBar}" BasedOn="{StaticResource MaterialDesignLinearProgressBar}" />
            <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource MaterialDesignRadioButton}" />
            <Style TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource MaterialDesignRaisedButton}" />
            <!--<Style TargetType="{x:Type ScrollBar}" BasedOn="{StaticResource MaterialDesignScrollBar}" />
            <Style TargetType="{x:Type ScrollViewer}" BasedOn="{StaticResource MaterialDesignScrollViewer}" />-->
            <Style TargetType="{x:Type Slider}" BasedOn="{StaticResource MaterialDesignSlider}" />
            <!--<Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}" />-->
            <!--<Style TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDisplay1TextBlock}" />-->
            <Style TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource MaterialDesignSwitchToggleButton}" />
            <Style TargetType="{x:Type ToolBar}" BasedOn="{StaticResource MaterialDesignToolBar}" />
            <Style TargetType="{x:Type ToolBarTray}" BasedOn="{StaticResource MaterialDesignToolBarTray}" />
            <Style TargetType="{x:Type ToolTip}" BasedOn="{StaticResource MaterialDesignToolTip}" />
            <Style TargetType="{x:Type TreeView}" BasedOn="{StaticResource MaterialDesignTreeView}" />
            <Style TargetType="{x:Type TreeViewItem}" BasedOn="{StaticResource MaterialDesignTreeViewItem}" />
            <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource MaterialDesignListView}" />
            <Style TargetType="{x:Type ListViewItem}" BasedOn="{StaticResource MaterialDesignListBoxItem}" />
            <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource MaterialDesignMenu}" />
            <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource MaterialDesignMenuItem}" />

            <Style x:Key="ListViewI" TargetType="ListView" BasedOn="{StaticResource MaterialDesignListView}">
                <Setter Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="#FF171717" Opacity="0.70"/>
                    </Setter.Value>
                </Setter>
                <Setter Property="BorderBrush" Value="#FFEAF32C" />
                <Setter Property="BorderThickness" Value="2, 0, 0, 0" />

                <Setter Property="Padding" Value="5" />
                <Setter Property="Opacity" Value="40" />
            </Style>
            
            <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}" BasedOn="{StaticResource MaterialDesignSeparator}" />
            <Style x:Key="MaterialDesignDarkSeparator" TargetType="{x:Type Separator}" BasedOn="{StaticResource MaterialDesignSeparator}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignDarkSeparatorBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignDarkSeparatorBackground}"/>
            </Style>
            <Style x:Key="MaterialDesignLightSeparator" TargetType="{x:Type Separator}" BasedOn="{StaticResource MaterialDesignSeparator}">
                <Setter Property="Background" Value="{DynamicResource MaterialDesignLightSeparatorBackground}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignLightSeparatorBackground}"/>
            </Style>

            <!--<Style TargetType="Control" x:Key="{x:Static dgx:DataGridFilter.IconStyleKey}" BasedOn="{StaticResource {x:Static dgx:DataGridFilter.IconStyleKey}}">
                <Setter Property="Foreground" Value="Blue" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" Value="True">
                        <Setter Property="Foreground" Value="Red" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>-->
            <!--Start DataGridExt.-->
            <!-- Style for a filter check box. The check box is only visible when it's hovered, focused or has a value.  -->

            
            <Style x:Key="{x:Static dgx:DataGridFilter.ColumnHeaderSearchCheckBoxStyleKey}" TargetType="CheckBox">
                <Setter Property="IsThreeState" Value="True" />
                <Setter Property="Margin" Value="4,0,2,0" />
                <Style.Triggers>
                    <Trigger Property="CheckBox.IsChecked" Value="{x:Null}">
                        <Setter Property="Opacity" Value="0" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" Value="1" />
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Opacity" Value="1" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Style for the clear button in the filter text box -->
            <Style x:Key="{x:Static dgx:DataGridFilter.ColumnHeaderSearchTextBoxClearButtonStyleKey}" TargetType="Button">
                <Setter Property="Foreground" Value="#1B2F47" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="ButtonBase">
                            <Border Background="Transparent">
                                <Path Data="M0,0 L7,7 M0,7 L7,0" Stroke="{TemplateBinding Foreground}" HorizontalAlignment="Center" VerticalAlignment="Center" StrokeThickness="2" Margin="3" />
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="Gray" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!-- Style for a filter text box. The text box is only visible when it's hovered, focused or has a value.  -->
            <Style x:Key="{x:Static dgx:DataGridFilter.ColumnHeaderSearchTextBoxStyleKey}" TargetType="TextBox">
                <Setter Property="MinWidth" Value="50" />
                <Setter Property="MaxWidth" Value="50" />
                <Setter Property="Margin" Value="4,0,2,0" />
                <Setter Property="Padding" Value="2" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TextBox}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <DockPanel>
                                    <Button x:Name="clear" DockPanel.Dock="Right" Focusable="False" Style="{DynamicResource {x:Static dgx:DataGridFilter.ColumnHeaderSearchTextBoxClearButtonStyleKey}}">
                                        <i:Interaction.Behaviors>
                                            <behaviors:ClearTextBoxOnButtonClickBehavior TextBox="{Binding RelativeSource={RelativeSource TemplatedParent}}" />
                                        </i:Interaction.Behaviors>
                                    </Button>
                                    <ScrollViewer x:Name="PART_ContentHost" Focusable="False" HorizontalScrollBarVisibility="Visible" VerticalScrollBarVisibility="Visible" />
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Opacity" TargetName="border" Value="0.56" />
                                </Trigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#FF7EB4EA" />
                                </Trigger>
                                <Trigger Property="IsKeyboardFocused" Value="True">
                                    <Setter Property="BorderBrush" TargetName="border" Value="#FF569DE5" />
                                </Trigger>
                                <Trigger Property="Text" Value="">
                                    <Setter Property="Visibility" TargetName="clear" Value="Hidden" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Text" Value="">
                        <Setter Property="Opacity" Value="0" />
                    </Trigger>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Opacity" Value="1" />
                    </Trigger>
                    <Trigger Property="IsFocused" Value="True">
                        <Setter Property="Opacity" Value="1" />
                    </Trigger>
                </Style.Triggers>
            </Style>

            <!-- Reusable filter symbol -->
            <ControlTemplate x:Key="{x:Static dgx:DataGridFilter.IconTemplateKey}">
                <Path Data="M0,0 L10,0 6,4 6,9 4,9 4,4 Z" Fill="#ffffff" VerticalAlignment="Center" HorizontalAlignment="Right" Margin="2,0" />
            </ControlTemplate>

            <Style TargetType="Control" x:Key="{x:Static dgx:DataGridFilter.IconStyleKey}">
                <Setter Property="HorizontalAlignment" Value="Right" />
                <Setter Property="VerticalAlignment" Value="Center" />
                <Setter Property="Template" Value="{DynamicResource {x:Static dgx:DataGridFilter.IconTemplateKey}}" />
                <Setter Property="Focusable" Value="False" />
                <Setter Property="Foreground" Value="Gray" />
            </Style>

            <!-- Default template for a filter on a column represented by a DataGridTextColumn. -->
            <ControlTemplate x:Key="{x:Static dgx:DataGridFilter.TextColumnFilterTemplateKey}">
                <Grid>
                    <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}" />
                    <TextBox Style="{DynamicResource {x:Static dgx:DataGridFilter.ColumnHeaderSearchTextBoxStyleKey}}"
               Text="{Binding Path=Filter, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </ControlTemplate>

            <!-- Default template for a filter on a column represented by a DataGridCheckBoxColumn. -->
            <ControlTemplate x:Key="{x:Static dgx:DataGridFilter.CheckBoxColumnFilterTemplateKey}">
                <Grid>
                    <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}" />
                    <CheckBox Style="{DynamicResource {x:Static dgx:DataGridFilter.ColumnHeaderSearchCheckBoxStyleKey}}"
                IsChecked="{Binding Path=Filter, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </ControlTemplate>

            <!-- Default template for a filter on a column represented by a DataGridTemplateColumn. -->
            <ControlTemplate x:Key="{x:Static dgx:DataGridFilter.TemplateColumnFilterTemplateKey}">
                <Grid>
                    <Control Style="{DynamicResource {x:Static dgx:DataGridFilter.IconStyleKey}}" />
                    <TextBox Style="{DynamicResource {x:Static dgx:DataGridFilter.ColumnHeaderSearchTextBoxStyleKey}}"
               Text="{Binding Path=Filter, UpdateSourceTrigger=PropertyChanged}" />
                </Grid>
            </ControlTemplate>

            <!-- Default template for the column header including the filter control. -->
            <DataTemplate x:Key="{x:Static dgx:DataGridFilter.ColumnHeaderTemplateKey}">
                <DockPanel Background="Transparent">
                    <!-- The control to host the filter UI for this column -->
                    <dgx:DataGridFilterColumnControl DockPanel.Dock="Right" />
                    <ContentPresenter x:Name="PART_Content" Content="{Binding}"
                        SnapsToDevicePixels="{Binding SnapsToDevicePixels, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                        HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}"
                        VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=DataGridColumnHeader}}" />
                </DockPanel>
            </DataTemplate>

            <Style TargetType="ToolTip" x:Key="{x:Static behaviors:ExtendedStarSizeBehavior.ColumnHeaderGripperToolTipStyleKey}">
                <Setter Property="ContentTemplate">
                    <Setter.Value>
                        <DataTemplate>
                            <TextBlock>
            <Run Text="+Ctrl => Apply star sizes to right columns" /><LineBreak /><Run Text="+Shift => Extend beyond available size" />
                            </TextBlock>
                        </DataTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <ControlTemplate x:Key="IntegerFilter">
                <lControls:IntegerGreatherThanFilterControl Filter="{Binding Path=Filter, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=dgx:DataGridFilterColumnControl}}" />
            </ControlTemplate>
            <!--End DataGridExt.-->
           
            <!--custm style-->
            <Color x:Key="TabSelectdColor">#011C2D</Color>
            <SolidColorBrush x:Key="TabSelectd" Color="{DynamicResource TabSelectdColor}"/>

            <Color x:Key="MianAppColorC">#3B97D6</Color>
            <SolidColorBrush x:Key="MianAppColor" Color="{DynamicResource MianAppColorC}"/>
            <Color x:Key="TabUnSelectdColor">#509BB2</Color>
            <SolidColorBrush x:Key="TabUnSelectd" Color="{DynamicResource TabUnSelectdColor}"/>
            <Color x:Key="GridHeaderColor">#005875</Color>
            <SolidColorBrush x:Key="GridHeader" Color="{DynamicResource GridHeaderColor}"/>
            <Color x:Key="MTextSelected">#cccccc</Color>
            <SolidColorBrush x:Key="MenuTextSelected" Color="{DynamicResource MTextSelected}"/>
            
            <Style TargetType="{x:Type TabItem}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabItem}">
                            <Grid >
                                <Border Name="Border" Margin="1" >
                                    <ContentPresenter x:Name="ContentSite" MinWidth="100"  VerticalAlignment="Center" HorizontalAlignment="Left" 
                                                      ContentSource="Header" Margin="5,5" />
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabSelectd}" />
                                    <Setter Property="Foreground" Value="White" />
                                    
                                </Trigger>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="{DynamicResource TabUnSelectd}" />
                                    <Setter TargetName="Border" Property="BorderThickness" Value="1,1,1,0" />
                                    <Setter TargetName="Border" Property="CornerRadius" Value="0" />
                                    <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource TabUnSelectd}" />
                                    
                                    <Setter Property="Foreground" Value="Black" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <Style TargetType="{x:Type Image}" >
                
            </Style>
            <Style  TargetType="{x:Type TabControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type TabControl}">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>
                                <TabPanel Grid.Row="0" Panel.ZIndex="1"  Margin="0,20,0,-1" IsItemsHost="True"  Background="Transparent" />
                                <Border Grid.Row="1"  BorderBrush="{DynamicResource TabSelectd}" BorderThickness="0,3,0,0"  Opacity="80">
                                    <ContentPresenter ContentSource="SelectedContent" />
                                </Border>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            
            

            <!--For Print-->
            <Style x:Key="DellBtn" TargetType="{x:Type Button}">
                <Setter Property="Background" Value="Transparent"/>
                <!--<Setter Property="Background" Value="LightGray"/>-->
            </Style>
            
            <Style x:Key="headerFooterRowStyle" TargetType="{x:Type TableRowGroup}">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="10px"/>
                <!--<Setter Property="Background" Value="LightGray"/>-->
            </Style>

            <!-- Style for data rows. -->
            <Style x:Key="dataRowStyle" TargetType="{x:Type TableRowGroup}">
                <Setter Property="FontSize" Value="11"/>
                <Setter Property="FontFamily" Value="Arial" />
            </Style>

            <!-- Style for data cells. -->
            <Style TargetType="{x:Type TableCell}">
                <Setter Property="Padding" Value="0.07cm"/>
                <Setter Property="BorderBrush" Value="Black"/>
                <Setter Property="BorderThickness" Value="0.01cm"/>
                <Setter Property="FontFamily" Value="Arial" />
            </Style>

            <Style x:Key="ReportHeaderParty" TargetType="{x:Type TableRowGroup}">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="11px"/>
            </Style>

            <!-- Style for header/footer rows. -->
            <Style x:Key="ReportHeader" TargetType="{x:Type TableRowGroup}">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="11px"/>
            </Style>
            <Style  TargetType="{x:Type Paragraph}">
                <Setter Property="FontFamily" Value="Arial" />

            </Style>
            <Style x:Key="ReportHead" TargetType="{x:Type Paragraph}">
                <Setter Property="FontFamily" Value="Arial" />
                <Setter Property="FontSize" Value="18px"/>
            </Style>
        <!--Print Style-->

            <Style x:Key="LeftMenuButton" TargetType="{x:Type Button}">
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0 0 0 0"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="Transparent" />
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource pressed}" />
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                </Style.Triggers>
            </Style>


            <Style x:Key="StyleModuleHeading" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDisplay1TextBlock}">
               
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="FontSize" Value="24" />

            </Style>
            <!--<ControlTemplate x:Key="errorTemplate">
                <DockPanel LastChildFill="True">
                    <Border BorderBrush="OrangeRed" BorderThickness="1">
                        <AdornedElementPlaceholder>
                            <Border HorizontalAlignment="Right"  BorderBrush="OrangeRed"  Width="20" Height="20" Margin="5" Background="OrangeRed" CornerRadius="5" DockPanel.Dock="Right">
                                <TextBlock Text="!"  VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="White" FontSize="20"></TextBlock>
                            </Border>
                        </AdornedElementPlaceholder>
                    </Border>
                </DockPanel>
            </ControlTemplate>-->

            <!--<Style TargetType="{x:Type TextBox}">
              
            </Style>-->

            <Style x:Key="DataGrid" TargetType="DataGrid">
                <Setter Property="CellStyle">
                    <Setter.Value>
                        <Style TargetType="DataGridCell"  BasedOn="{StaticResource MaterialDesignDataGridCell}">
                            <Setter Property="Background" Value="Transparent" />
                            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                            <Setter Property="VerticalContentAlignment" Value="Stretch" />
                            <Setter Property="IsTabStop" Value="False" />
                            <Setter Property="BorderThickness" Value="0" />
                            <Setter Property="Height" Value="25" />
                        </Style>
                    </Setter.Value>
                </Setter>
            </Style>
            
            <Style x:Key="MaterialDesignDataGridColumnHeader" TargetType="{x:Type DataGridColumnHeader}">
                <Setter Property="VerticalContentAlignment" Value="Center"/>
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                <Setter Property="TextBlock.FontWeight" Value="Medium" />
                <Setter Property="Padding" Value="5,3" />
                <!--<Setter Property="Padding" Value="{Binding RelativeSource={RelativeSource Self}, Path=(wpf:DataGridAssist.ColumnHeaderPadding)}" />-->
                <Setter Property="Foreground" Value="#FFFFFFFF" />
                <Setter Property="Background" Value="{DynamicResource MaterialDesignToolTipBackground}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                            <ControlTemplate.Resources>
                                <Storyboard x:Key="GoToVisible">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="12" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                                <Storyboard x:Key="GoToHidden">
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="SortDirectionIndicator" Storyboard.TargetProperty="Width">
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="12" />
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="0" />
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </ControlTemplate.Resources>
                            <Grid>
                                <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}">
                                    <Grid Background="Transparent">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <!--<wpf:ListSortDirectionIndicator Grid.Column="0" Width="0" Height="12" 
                                                                x:Name="SortDirectionIndicator"
                                                                ListSortDirection="{TemplateBinding SortDirection}"
                                                                />-->
                                        <ContentPresenter Grid.Column="1" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                  Margin="{TemplateBinding Padding}"/>
                                    </Grid>
                                </Border>
                                <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                                <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource MaterialDesignGridColumnHeaderGripper}"/>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Foreground" Value="#000000" />

                                </Trigger>
                                <Trigger Property="SortDirection" Value="Ascending">
                                    <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                                </Trigger>
                                <Trigger Property="SortDirection" Value="Descending">
                                    <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}" />
                                </Trigger>
                                <!--<Trigger SourceName="SortDirectionIndicator" Property="IsNeutral" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Storyboard="{StaticResource GoToVisible}" Name="GoToVisible" />
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <RemoveStoryboard BeginStoryboardName="GoToVisible" />
                                        <BeginStoryboard Storyboard="{StaticResource GoToHidden}" />
                                    </Trigger.ExitActions>
                                </Trigger>-->
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
            <!--<Style x:Key="TextBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Padding" Value="20"/>
            </Style>-->

            <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}">
                <Setter Property="Padding" Value="1,1" />
                <Setter Property="Foreground" Value="Black" />
                <Setter Property="MinHeight" Value="25" />
                <Setter Property="Margin" Value="1" />
                <Setter Property="Validation.ErrorTemplate">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel Orientation="Horizontal">
                                <!-- Placeholder for the TextBox itself -->
                                <AdornedElementPlaceholder x:Name="textBox"/>
                                <TextBlock Margin="10" Text="{Binding [0].ErrorContent}" Foreground="Red"/>
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="Validation.HasError" Value="true">
                        <Setter Property="ToolTip" Value="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=(Validation.Errors)[0].ErrorContent}" />
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="MaterialDesignDataGridCell" TargetType="{x:Type DataGridCell}">
                <!--Setter Property="TextBlock.FontSize" Value="13" /-->
                <Setter Property="Padding" Value="5 "/>
                <Setter Property="Height" Value="35" />
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type DataGridCell}">
                            <Border BorderBrush="{TemplateBinding BorderBrush}" 
                                    BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                          Margin="{TemplateBinding Padding}"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsKeyboardFocusWithin" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource MaterialDesignTextBoxBorder}"/>
                    </Trigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="Selector.IsSelectionActive" Value="False"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}"/>
                    </MultiTrigger>
                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition Property="IsSelected" Value="True"/>
                            <Condition Property="Selector.IsSelectionActive" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter Property="Foreground" Value="{DynamicResource MaterialDesignBody}"/>
                        <Setter Property="Background" Value="{DynamicResource MaterialDesignSelection}" />
                        <Setter Property="BorderThickness" Value="0" />
                    </MultiTrigger>
                    <Trigger Property="IsEnabled" Value="False">
                        <Setter Property="Opacity" Value="1"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="TopMenuButton" TargetType="{x:Type Button}">
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0 0 0 0"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="Foreground" Value="White"/>
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="Black" BorderThickness="{TemplateBinding BorderThickness}">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="Transparent" />
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource pressed}" />
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>
                </Style.Triggers>
            </Style>
            <Style x:Key="cstmBlock" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource MaterialDesignDisplay1TextBlock}" >
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="TextBlock.FontWeight" Value="Bold" />
            </Style>

            <Style x:Key="cstmTxtBox" TargetType="{x:Type TextBox}" BasedOn="{StaticResource MaterialDesignTextBox}" >
                <Setter Property="TextBlock.FontSize" Value="12" />
                <Setter Property="TextBlock.FontWeight" Value="Bold" />
                
            </Style>
            <Style x:Key="TopOpreatButton" TargetType="{x:Type Button}" >
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0 0 0 0"/>
                <Setter Property="Background" Value="#FF3E647E"/>
                <Setter Property="Foreground" Value="White"/>
                <!--<Setter Property="Padding" Value="10,5"/>-->
                <Setter Property="Margin" Value="10,5" />
                <Setter Property="Cursor" Value="Hand"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" 
                                    Padding="5,4" 
                                    BorderBrush="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}">
                                    <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <!--<Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="BorderBrush" Value="Transparent" />
                        <Setter Property="Background" Value="Transparent"/>
                    </Trigger>-->
                    <Trigger Property="IsPressed" Value="True">
                        <Setter Property="BorderBrush" Value="{DynamicResource pressed}" />
                        <!--<Setter Property="Background" Value="Transparent"/>-->
                    </Trigger>
                </Style.Triggers>
            </Style>

     
        </ResourceDictionary>


    </Application.Resources>
</Application>
